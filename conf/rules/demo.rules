import java.util.Random

var Timer timer = null
val resList = newArrayList("640/480", "320/240", "480/360")
val urlList = newArrayList("http://www.fillmurray.com", "http://www.fillmurray.com/g",
                 "http://www.placecage.com", "http://www.placecage.com/c", "http://www.placecage.com/g")
val Random random = new Random()


rule "Timer Demo"
when
    Item Light_GF_Corridor_Ceiling received command
then
    if(receivedCommand==ON) {
        if(timer==null) {
            // first ON command, so create a timer to turn the light off again
            timer = createTimer(now.plusSeconds(10)) [|
                sendCommand(Light_GF_Corridor_Ceiling, OFF)
            ]
        } else {
            // subsequent ON command, so reschedule the existing timer
            timer.reschedule(now.plusSeconds(10))
        }
    } else if(receivedCommand==OFF) {
        // remove any previously scheduled timer
        if(timer!=null) {
            timer.cancel
            timer = null
        }
    }
end

/**
 * The following rules help initializing the demo items with some helpful states.
 */


rule "Initialize switch states"
    when
        System started
    then
        logInfo("Initialize switch states", MCP23017ContactB0_LED.state.toString)
end

// rule "Initialize contact states"
    // when
        // System started
    // then
        
        //gWallButtons?.members.forEach(wall_button|
        //     wall_button.postUpdate(wall_button.state.toString)
        //)
        
        // gWallButtons?.members.forEach[button | 
            // light.sendCommand(button.historicState(now.minusSeconds(30)).state.toString)
            //button.sendCommand(ON)
       // ]
//end

// Creates an item that stores the last update time of this item
rule "Records last weather update time"
    when
        Item Weather_Temperature received update
    then
        postUpdate(Weather_LastUpdate, new DateTimeType())
end

rule "Set random wifi variations"
    when
        System started or
        Time cron "/20 * * * * ?"
    then
        postUpdate(Wifi_Level, (Math::random * 4.0).intValue)
end

rule "Set random image URLs"
    when
        Time cron "/10 * * * * ?"
    then
        val url = urlList.get(random.nextInt(urlList.length))
        val res = resList.get(random.nextInt(resList.length))

        postUpdate(ImageURL, url + "/" + res)
end


// rule "Switch LED0 State Update"
    // when
        // Item MCP23017Contact_B0_LED received update

    // then
        // logInfo("SwitchLED0", MCP23017Contact_B0_LED.state.toString)
        // val button = gWallButtons?.members.filter[t | t != NULL && t.state != NULL && t.name == "MCP23017Contact_B0"].head as ContactItem
        // if(button != NULL) {
            // if(MCP23017Contact_B0_LED.state == ON) button.postUpdate(OPEN) else button.postUpdate(CLOSED)
        // }
// end

        
// rule "Switch LED4 State Update"
    // when
        // Item MCP23017ContactB4_LED received update
    // then
        // logInfo("SwitchLED4", MCP23017ContactB4_LED.state.toString)
// end


// vim: syntax=Xtend
